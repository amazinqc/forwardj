package com.priv.forward;import java.util.Collections;import java.util.Map;import java.util.concurrent.CompletableFuture;import com.priv.forward.local.ForwardCrossThread;import com.priv.forward.local.ForwardEventThread;import com.priv.forward.local.ForwardUserThread;import com.priv.forward.mock.MockUtil;import com.priv.forward.rpc.ForwardCentralServer;import com.priv.forward.rpc.ForwardRoleServer;import com.priv.forward.rpc.converter.Converter;import com.priv.forward.rpc.converter.GenericTypeConverter;interface ICrossTest {    @Forward(value = ForwardCrossThread.class, callback = false)    @Forward(ForwardEventThread.class)    void local();    @Forward(ForwardCentralServer.class)    @Forward(ForwardCrossThread.class)    CompletableFuture<Boolean> cross(@Converter Map<Integer, String> map);    @Forward(ForwardCentralServer.class)    @Forward(ForwardCrossThread.class)    @Converter(GenericTypeConverter.class)    int convert();    @Forward(ForwardRoleServer.class)    @Forward(ForwardUserThread.class)    boolean notifyRole();}public class Main {    public static void main(String[] args) {        ICrossTest proxy = ForwardProxy.newProxy(ICrossTest.class, new ICrossTest() {            @Override            public void local() {                System.out.println("local");            }            @Override            public CompletableFuture<Boolean> cross(Map<Integer, String> map) {                System.out.println("cross = " + map);                return CompletableFuture.completedFuture(false);            }            @Override            public int convert() {                System.out.println("convert");                return 123;            }            @Override            public boolean notifyRole() {                System.out.println("notifyRole");                return true;            }        });        proxy.local();        proxy.cross(Collections.singletonMap(0, "test"))                .thenAccept(result -> System.out.println("result = " + result))                .exceptionally(throwable -> {                    MockUtil.decodeThrowable(throwable).printStackTrace();                    return null;                });        System.out.println("proxy.convert() = " + proxy.convert());        System.out.println("proxy.notifyRole() = " + proxy.notifyRole());    }}